# -*- coding: utf-8 -*-
"""clusters_caracteristicas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ORCJPFMeYO6jVachmzmAmJMBxTxzjkeL
"""

import pandas as pd
import numpy as np

# Asignacion de base de datos, y labels del modelo utilizado
data = data
labels = labels

# calculamos la cantidad de cada clase con value_counts
cluster_counts = data['cluster'].value_counts()

# AÃ±ade una  columna con las clusters
data = data.assign(cluster=labels)

# Conocer el numero de clusters
value_counts = data['cluster'].value_counts()
num_clusters = value_counts.shape[0]

value_counts = data['cluster'].value_counts()
min_class = value_counts.index.min()

def create_cluster_subframes(X_labels, max_cluster, min_class):
    cluster_subframes = {}
    for i in range(min_class, min_class +max_cluster):
        cluster_subframe = X_labels.loc[X_labels['cluster'] == i]
        cluster_subframes[f'cluster_{i}'] = cluster_subframe
    return cluster_subframes

cluster_subframes = create_cluster_subframes(data, num_clusters, min_class)

def caracteristicas_cluster(cluster_subframes):
  results = {"Cluster": [], "Count": [], **{col: [] for col in cluster_subframes[list(cluster_subframes.keys())[0]].columns}}

  # Iterar sobre cada cluster en cluster_subframes
  for cluster_name, cluster_df in cluster_subframes.items():
      #print(f"Procesando cluster: {cluster_name}")
      results["Cluster"].append(cluster_name)
      results["Count"].append(len(cluster_df))  # Agregamos la cantidad de elementos en cada cluster
      for col in cluster_df.columns:
          value_counts = cluster_df[col].value_counts()
          count_1 = value_counts.get(1, 0)
          results[col].append(count_1)

  # Crear una tabla con los resultados

  results_df = pd.DataFrame(results)

  return results_df

caracteristicas_cluster(cluster_subframes)

def caracteristicas_cluster_porcentaje(cluster_subframes):
  results = {"Cluster": [], "Count": [], **{col: [] for col in cluster_subframes[list(cluster_subframes.keys())[0]].columns}}
  # Iterar sobre cada cluster en cluster_subframes
  for cluster_name, cluster_df in cluster_subframes.items():
      #print(f"Procesando cluster: {cluster_name}")
      results["Cluster"].append(cluster_name)
      results["Count"].append(len(cluster_df))
      for col in cluster_df.columns:
          value_counts = cluster_df[col].value_counts()
          count_1 = value_counts.get(1, 0)
          total_values = len(cluster_df[col])
          percentage_1 = (count_1 / total_values) * 100
          results[col].append(percentage_1)

  # Crear una tabla con los resultados

  results_df = pd.DataFrame(results)

  return results_df

caracteristicas_cluster_porcentaje(cluster_subframes)



def caracteristicas_cluster_porcentaje(cluster_subframes):
  results = {"Cluster": [], "Count": [], **{col: [] for col in cluster_subframes[list(cluster_subframes.keys())[0]].columns}}
  # Iterar sobre cada cluster en cluster_subframes
  for cluster_name, cluster_df in cluster_subframes.items():
      #print(f"Procesando cluster: {cluster_name}")
      results["Cluster"].append(cluster_name)
      results["Count"].append(len(cluster_df))
      for col in cluster_df.columns:
          value_counts = cluster_df[col].value_counts()
          count_1 = value_counts.get(1, 0)
          total_values = len(cluster_df[col])
          percentage_1 = (count_1 / total_values) * 100
          results[col].append(percentage_1)

  # Crear una tabla con los resultados

  results_df = pd.DataFrame(results)

  return results_df

caracteristicas_cluster_porcentaje(cluster_subframes)