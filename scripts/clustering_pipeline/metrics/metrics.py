# -*- coding: utf-8 -*-
"""Metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/165oO4X25JJqaelSufNhj-BYTD4kUFdgO
"""

from sklearn.metrics import davies_bouldin_score
from sklearn.metrics import silhouette_score
from sklearn.metrics import calinski_harabasz_score

from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import umap

import itertools
import os
#import pandas as pd
#import matplotlib.pyplot as plt
#from sklearn.decomposition import PCA
import zipfile

from sklearn.cluster import KMeans
import numpy as np
import pandas as pd
from sklearn.mixture import GaussianMixture
from sklearn.datasets import make_blobs

def k_means(df, clustering_method, lista_k):
  #df = np.array(db)
  modelos = []
  for k in lista_k:
    # Enternamiento
    model = clustering_method(n_clusters=k)
    model.fit(df)
    modelos.append(model)
  return modelos

def metrics(df, l_modelos):
  scores = {'davie_bouldin' : [], 'calinski_harabasz': [], 'sillhouette': []}
  for m in  l_modelos:
    scores['davie_bouldin'].append(davies_bouldin_score(df, m.labels_))
    scores['calinski_harabasz'].append(calinski_harabasz_score(df, m.labels_))
    scores['sillhouette'].append(silhouette_score(df, m.labels_))
  return scores

def informe_metrics(scores, lista_k):
    df = pd.DataFrame(scores)
    df.insert(0, 'numero de k', lista_k)
    df['davie_bouldin_rank'] = df['davie_bouldin'].rank(method='min').astype(int)
    df['calinski_harabasz_rank'] = df['calinski_harabasz'].rank(ascending=False, method='min').astype(int)
    df['sillhouette_rank'] = df['sillhouette'].rank(ascending=False, method='min').astype(int)
    df.to_csv("scores.csv", index=False)
    return df

def best_k(df):
    rank_columns = [col for col in df.columns if col.endswith('_rank')]
    unique_numbers = set()
    for col in rank_columns:
        unique_numbers.update(df.loc[df[col].isin([1, 2, 3]), 'numero de k'])
    return sorted(unique_numbers)

def obtener_modelos(model_list, list_best_k):
    modelos_filtrados = [modelo for modelo in model_list if modelo.n_clusters in list_best_k]
    return modelos_filtrados

def informe(db, k, clustering_method, name):
  df = np.array(db)
  k = [i for i in range(2, 41)]
  modelos = k_means(df, clustering_method,k)
  scores = metrics(df, modelos)
  df_scores = informe_metrics(scores, k)
  list_best_k = best_k(df_scores)

  

  mejores_modelos = obtener_modelos(modelos, list_best_k)

  return mejores_modelos , str(clustering_method)

